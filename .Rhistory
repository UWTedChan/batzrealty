last_chance <- add_city_df(uri)
df <- data.frame(matrix(unlist(regionx), nrow=7, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regions), nrow=7, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=5, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=3, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=2, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=4, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=5, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=6, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=8, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=9, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=10, byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(regionx), nrow=11, byrow=F),stringsAsFactors=FALSE)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=11, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- add_city_df(uri)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=11, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- state_df(uri)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=11, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- state_df(uri)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=7, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long", "lol", "bruh", "this", "sucks")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- state_df(uri)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=11, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long", "lol", "bruh", "this", "sucks")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- state_df(uri)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=2, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long", "lol", "bruh", "this", "sucks")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- state_df(uri)
state_df <- function(uri){
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
regionx <- list$response$list
# remove missing values
regionx <- regionx[lapply(regionx,length)>4]
df <- data.frame(matrix(unlist(regionx), nrow=7, byrow=F),stringsAsFactors=FALSE)
df <- t(df)
df <- as.data.frame(df, stringsAsFactors = FALSE)
row.names(df) <- 1:NROW(df)
colnames(df) <- c("id", "name", "price", "currency", "web", "lat", "long")
df <- df %>% mutate(state == state)
return(df)
}
last_chance <- state_df(uri)
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list2 <- fromJSON(list)
list <- xmlToList(response)
response <- xmlParse(uri)
list <- xmlToList(response)
z_id_ars3697 <- "X1-ZWz18lzviceeiz_9skq6"
base_uri <- "http://www.zillow.com/webservice/GetRegionChildren.htm"
state <- "wa"
library("shiny")
library("xml2")
library("jsonlite")
library("dplyr")
z_id_ars3697 <- "X1-ZWz18lzviceeiz_9skq6"
base_uri <- "http://www.zillow.com/webservice/GetRegionChildren.htm"
state <- "wa"
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list2 <- fromJSON(list)
list <- xmlToList(response)
View(list)
View(list2)
state_data <- list$response$list
View(state_data)
df <- data.frame(state_data)
View(df)
state_data[1]
state_data[2]
state_data[2,]
state_data[1]
state_data[2]
state_data[3]
state_data[-1]
state_data <- state_data[-1]
View(df)
View(state_data)
state_data[1]
list <- fromJSON(list)
state_data <- list$response$list
state_data[1]
state_data <- state_data[-1]
state_data[1]
state_data[2]
test <- data_frame(state_data[1])
View(test)
test <- data_frame(id = state_data[1]$region$id,
name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
View(test)
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
View(test)
test <- data_frame(name = state_data[2]$region$name,
zindex_usd = state_data[2]$region$zindex$text)
test <- data_frame(name = state_data$region$name,
zindex_usd = state_data$region$zindex$text)
View(test)
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
View(list2)
View(state_data)
View(state_data)
nrow(state_data)
count(state_data)
NROW(state_data)
for(i in NROW(state_data)) {
print(i)
}
for(i in NROW(state_data)) {
print(i)
}
for(i in 1:NROW(state_data)) {
print(i)
}
for(i in 2:NROW(state_data)) {
print(i)
}
for(i in 2:NROW(state_data)) {
test$name <- state_data[i]$region$name
test$zindex_usd <- state_data[i]$region$zindex$text
}
View(test)
state_data <- list$response$list
state_data <- state_data[-1]
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
for(i in 2:NROW(state_data)) {
test$name <- state_data[i]$region$name
test$zindex_usd <- state_data[i]$region$zindex$text
}
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
state_data <- list$response$list
state_data <- state_data[-1]
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
test$name <- state_data[2]$region$name
test$zindex_usd <- state_data[2]$region$zindex$text
View(test)
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
View(test)
test[2]$name <- state_data[2]$region$name
test[2]$zindex_usd <- state_data[2]$region$zindex$text
View(test)
test[2]$name <- state_data[2]$region$name
test[2]$zindex_usd <- state_data[2]$region$zindex$text
test$name[2] <- state_data[2]$region$name
test$zindex_usd[2] <- state_data[2]$region$zindex$text
test$name[2,] <- state_data[2]$region$name
test$zindex_usd[2,] <- state_data[2]$region$zindex$text
test$name[,2] <- state_data[2]$region$name
test$zindex_usd[,2] <- state_data[2]$region$zindex$text
df<-data.frame("hi","bye")
names(df)<-c("hello","goodbye")
de<-data.frame("hola","ciao")
names(de)<-c("hello","goodbye")
newdf <- rbind(df, de)
View(newdf)
library("shiny")
library("xml2")
library("jsonlite")
library("dplyr")
z_id_ars3697 <- "X1-ZWz18lzviceeiz_9skq6"
base_uri <- "http://www.zillow.com/webservice/GetRegionChildren.htm"
state <- "wa"
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- xmlToList(response)
list <- toJSON(list, pretty = TRUE)
list <- fromJSON(list)
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
state_data <- list$response$list
state_data <- state_data[-1]
test <- data_frame(name = state_data[1]$region$name,
zindex_usd = state_data[1]$region$zindex$text)
for(i in 2:NROW(state_data)) {
df <- data.frame(name = state_data[i]$region$name,
zindex_usd = state_data[i]$region$zindex$text)
test <- rbind(test, df)
}
View(test)
View(state_data)
state_data[19]
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
state_data <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
test <- rbind(test, df)
}
state_data
}
View(state_df("wa"))
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)
}
state_data
}
View(state_df("wa"))
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list
raw_data <- raw_data[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)
}
state_data
}
View(state_df("wa"))
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", "wa")
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
View(raw_data)
state_df("wa")
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text,
na.rm = TRUE)
state_data <- rbind(state_data, temp_df)
}
state_data
}
state_df("wa")
state = "wa"
state <- "wa"
#state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)
}
state_data
state <- "ca"
#state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)
}
state_data
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)
}
state_data
}
ok <- state_df("wa")
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
response <- xmlParse(uri)
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
raw_data <- list$response$list[-1]
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
for(i in 2:NROW(raw_data)) {
tryCatch({
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)}, error = function(e){})
}
state_data
}
ok <- state_df("wa")
View(ok)
View(state_df("ca"))
library("shiny")
library("jsonlite")
library("dplyr")
library("xml2")
base_uri <- "http://www.zillow.com/webservice/GetRegionChildren.htm"
z_id_ars3697 <- "X1-ZWz18lzviceeiz_9skq6"
# state_df (function) - Returns a dataframe of all of a state's cities/counties and their "zindex" in USD.
# state (string) - State in the United States. Should be writen in two letters (ex. "wa" for Washington, "ca" for California).
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
# Zillow returns the response back in XML.
response <- xmlParse(uri)
# Cleaning up XML and turning it into a cleaner looking dataframe.
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
# Getting rid of the first index, because it's just a "count" row. It's irrelevant.
raw_data <- list$response$list[-1]
# Creating a new dataframe with two columns: "name" and "zindex_usd".
# Only has one row, the first row from the raw_data dataframe.
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
# Adds in the rest of the rows into the state_data dataframe.
# tryCatch is used to prevent error messages in the console.
for(i in 2:NROW(raw_data)) {
tryCatch({
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)}, error = function(e){})
}
state_data
}
View(state_df("ca"))
library("shiny")
library("xml2")
library("jsonlite")
library("dplyr")
base_uri <- "http://www.zillow.com/webservice/GetRegionChildren.htm"
z_id_ars3697 <- "X1-ZWz18lzviceeiz_9skq6"
# state_df (function) - Returns a dataframe of all of a state's cities/counties and their "zindex" in USD.
# state (string) - State in the United States. Should be writen in two letters (ex. "wa" for Washington, "ca" for California).
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
# Zillow returns the response back in XML.
response <- xmlParse(uri)
# Cleaning up XML and turning it into a cleaner looking dataframe.
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
# Getting rid of the first index, because it's just a "count" row. It's irrelevant.
raw_data <- list$response$list[-1]
# Creating a new dataframe with two columns: "name" and "zindex_usd".
# Only has one row, the first row from the raw_data dataframe.
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
# Adds in the rest of the rows into the state_data dataframe.
# tryCatch is used to prevent error messages in the console.
for(i in 2:NROW(raw_data)) {
tryCatch({
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)}, error = function(e){})
}
state_data
}
View(state_df("ca"))
library("XML")
library("jsonlite")
library("dplyr")
base_uri <- "http://www.zillow.com/webservice/GetRegionChildren.htm"
z_id_ars3697 <- "X1-ZWz18lzviceeiz_9skq6"
# state_df (function) - Returns a dataframe of all of a state's cities/counties and their "zindex" in USD.
# state (string) - State in the United States. Should be writen in two letters (ex. "wa" for Washington, "ca" for California).
state_df <- function(state) {
uri <- paste0(base_uri, "?zws-id=", z_id_ars3697, "&state=", state)
# Zillow returns the response back in XML.
response <- xmlParse(uri)
# Cleaning up XML and turning it into a cleaner looking dataframe.
list <- response %>% xmlToList() %>% toJSON(pretty = TRUE) %>% fromJSON()
# Getting rid of the first index, because it's just a "count" row. It's irrelevant.
raw_data <- list$response$list[-1]
# Creating a new dataframe with two columns: "name" and "zindex_usd".
# Only has one row, the first row from the raw_data dataframe.
state_data <- data_frame(name = raw_data[1]$region$name,
zindex_usd = raw_data[1]$region$zindex$text)
# Adds in the rest of the rows into the state_data dataframe.
# tryCatch is used to prevent error messages in the console.
for(i in 2:NROW(raw_data)) {
tryCatch({
temp_df <- data.frame(name = raw_data[i]$region$name,
zindex_usd = raw_data[i]$region$zindex$text)
state_data <- rbind(state_data, temp_df)}, error = function(e){})
}
state_data
}
View(state_df("ca"))
shiny::runApp('batzrealty')
runApp('batzrealty')
runApp('batzrealty')
?arrange
runApp('batzrealty')
runApp('batzrealty')
runApp('batzrealty')
shiny::runApp('batzrealty')
runApp('batzrealty')
