average, the first two months of the year have the least
home sales while the middle of the year (May-July) have
the most sales. It can be concluded that demand for
homes increase during the summer times. Sellers should
capitalize on that demand and try to sell their homes
during the months of May and July.")
})
# Renders Seattle monthly median sales price
output$price_plot <- renderPlotly({
sales_price <- plot_ly(city_avg_price_df, x = ~Month, y = ~Avg_Value,
type = 'bar') %>%
layout(title = "Seattle Homes Median Sales Price by Month (2009 - 2017)",
xaxis = list(title = "Month"),
yaxis = list(title = "Median Sales Price (thousand $)"))
price_plot$elementId <- NULL
sales_price
})
output$price_summary <- renderText({
paste0("We further examined if the time of the year of sales have
an impact on the sales price. The above bar chart shows that
the median sales price have very negligible differences between
the different months. The median sales price trends slightly
upwards in the last few months of the year but the difference
is very small. Therefore, we still recommend sellers to try
to sell their houses in mid-year (May-July) since that is
when the demand for houses is the strongest.")
})
output$factor_intro <- renderText({
paste0("This tab examines the different factors of a home that
contribute to its value. We built a number of models
to identify the statistically significant factors
and attempt to predict home values. Home buyers can use
the insights from this section to identify good value
homes as well as the type of homes that would most likely
appreciate in value. Home sellers can identify which factors of
their properties to improve on in order to increase
the potential sales price.")
})
output$variables <- renderText({
paste(colnames(model_df), collapse = ", ")
})
output$coefficients <- renderText({
paste0("Our regression model shows that a property's previous sales price,
the year it was built in, the number of bedrooms, the size of the
finished property in sq.ft and the size of the lot in sq.ft. are
all statistically significant factors in predicting the value of
a home.")
})
output$coefficient_screenshot <- renderImage({
return(list(
src = "./img/coefficient_pic.png",
contentType = "image/png",
width = 600,
height = 390
))
}, deleteFile = FALSE)
output$regression_insights <- renderText({
paste0("Homes that are most likely to retain its value and appreciate
in the future are those that 1) have previously been sold at
a high price 2) were built relatively recent 3) have a high
number of bedrooms and 4) have a large size in both the lot
and the finished property. Buyers should also avoid buying
a townhouse as it has a negative impact on home valuation.
Sellers should be noted that the number of bathrooms have
a negative effect on valuation. It is much more rewarding
to focus on increasing the number of bedrooms.")
})
output$classification_intro <- renderText({
"A random forest model is a supervised machine learning algorithm
that generates multiple decision trees, then combine them all to
make a more accurate and stable classification model. We divided home
value into 4 different levels based on the quantiles
of home value. The first class is any values below the 1st quartile,
the second class is any values between the 1st quartile and the median,
the third class is any values between the median and the 3rd quartile,
and the last class is any values above the 3rd quartile."
})
output$forest_confusion <- renderTable(rownames = TRUE, {
forest_confusion_matrix <- model.rf$confusion
forest_confusion_matrix
})
output$forest_result <- renderText({
paste0("The random forest model had an accuracy of ",
forest_accuracy, "%. It is best at predicting the classification
of the top value class (> 75%). The error rate of the model can
potentially be a result of an incomplete model since the value
of a home should derive from more than just the variables we
included in the model.")
})
output$importance <- renderPlot({
varImpPlot(model.rf)
})
output$importance_explain <- renderText({
"The mean decrease accuracy plot shows the loss in prediction performance
when that particular factor is omitted from the dataset while the mean
decrease gini plot shows the decrease in GINI when the GINI factor is omitted.
GINI is a measure of node impurity. The mean decrease gini plot shows how
important a factor is to split the data correctly. The plots reaffirms that
the historical sales price of the home is the most important factor in
determining a home value."
})
}
shinyApp(ui, server)
setwd("~/batzrealty")
source("factor_analysis.R")
source("monthly_count.R")
source("monthly_price.R")
ui <- fluidPage(
titlePanel("Zillow Data"),
sidebarLayout(
sidebarPanel(),
mainPanel(
h2("Output Panel"),
tabsetPanel(type = "tabs",
tabPanel("Best Month to Sell Home",
textOutput("month_intro"),
br(),
plotlyOutput('count_plot'),
textOutput('count_summary'),
br(),
plotlyOutput('price_plot'),
textOutput('price_summary')
),
tabPanel("Statistical Factor Analysis",
textOutput("factor_intro"),
br(),
h3("Multiple Linear Regression"),
strong("We used the following variables
for our model"),
textOutput("variables"),
em("* Zestimate is Zillow's own valuation
of the property's current value"),
br(),
br(),
strong("Coefficient Results:"),
imageOutput("coefficient_screenshot"),
textOutput("coefficients"),
br(),
strong("Insights:"),
textOutput("regression_insights"),
br(),
h3("Classification Model (Random Forest)"),
textOutput("classification_intro"),
br(),
strong("Results"),
tableOutput("forest_confusion"),
br(),
textOutput("forest_result"),
br(),
strong("Factor Importance:"),
plotOutput("importance"),
textOutput("importance_explain")
)
)
)
)
)
server <- function(input, output) {
# Intro for Best Month to Sell House
output$month_intro <- renderText({
"This tab examines if there is a best time of the year to sell a house.
The insights generated can be useful for homesellers to identify the
best month of the year to sell their property."
})
# Renders Seattle monthly sales count
output$count_plot <- renderPlotly({
sales_count <- plot_ly(city_avg_df, x = ~Month, y = ~Avg_Value,
type = 'bar') %>%
layout(title = "Seattle Homes Sales Count by Month (2009 - 2017)",
xaxis = list(title = "Month"),
yaxis = list(title = "Count"))
sales_count
})
# Summary for the count plot
output$count_summary <- renderText({
paste0("The above bar chart summarises the average number of
home sales per month during 2009-2017 in Seattle. On
average, the first two months of the year have the least
home sales while the middle of the year (May-July) have
the most sales. It can be concluded that demand for
homes increase during the summer times. Sellers should
capitalize on that demand and try to sell their homes
during the months of May and July.")
})
# Renders Seattle monthly median sales price
output$price_plot <- renderPlotly({
sales_price <- plot_ly(city_avg_price_df, x = ~Month, y = ~Avg_Value,
type = 'bar') %>%
layout(title = "Seattle Homes Median Sales Price by Month (2009 - 2017)",
xaxis = list(title = "Month"),
yaxis = list(title = "Median Sales Price (thousand $)"))
sales_price
})
output$price_summary <- renderText({
paste0("We further examined if the time of the year of sales have
an impact on the sales price. The above bar chart shows that
the median sales price have very negligible differences between
the different months. The median sales price trends slightly
upwards in the last few months of the year but the difference
is very small. Therefore, we still recommend sellers to try
to sell their houses in mid-year (May-July) since that is
when the demand for houses is the strongest.")
})
output$factor_intro <- renderText({
paste0("This tab examines the different factors of a home that
contribute to its value. We built a number of models
to identify the statistically significant factors
and attempt to predict home values. Home buyers can use
the insights from this section to identify good value
homes as well as the type of homes that would most likely
appreciate in value. Home sellers can identify which factors of
their properties to improve on in order to increase
the potential sales price.")
})
output$variables <- renderText({
paste(colnames(model_df), collapse = ", ")
})
output$coefficients <- renderText({
paste0("Our regression model shows that a property's previous sales price,
the year it was built in, the number of bedrooms, the size of the
finished property in sq.ft and the size of the lot in sq.ft. are
all statistically significant factors in predicting the value of
a home.")
})
output$coefficient_screenshot <- renderImage({
return(list(
src = "./img/coefficient_pic.png",
contentType = "image/png",
width = 600,
height = 390
))
}, deleteFile = FALSE)
output$regression_insights <- renderText({
paste0("Homes that are most likely to retain its value and appreciate
in the future are those that 1) have previously been sold at
a high price 2) were built relatively recent 3) have a high
number of bedrooms and 4) have a large size in both the lot
and the finished property. Buyers should also avoid buying
a townhouse as it has a negative impact on home valuation.
Sellers should be noted that the number of bathrooms have
a negative effect on valuation. It is much more rewarding
to focus on increasing the number of bedrooms.")
})
output$classification_intro <- renderText({
"A random forest model is a supervised machine learning algorithm
that generates multiple decision trees, then combine them all to
make a more accurate and stable classification model. We divided home
value into 4 different levels based on the quantiles
of home value. The first class is any values below the 1st quartile,
the second class is any values between the 1st quartile and the median,
the third class is any values between the median and the 3rd quartile,
and the last class is any values above the 3rd quartile."
})
output$forest_confusion <- renderTable(rownames = TRUE, {
forest_confusion_matrix <- model.rf$confusion
forest_confusion_matrix
})
output$forest_result <- renderText({
paste0("The random forest model had an accuracy of ",
forest_accuracy, "%. It is best at predicting the classification
of the top value class (> 75%). The error rate of the model can
potentially be a result of an incomplete model since the value
of a home should derive from more than just the variables we
included in the model.")
})
output$importance <- renderPlot({
varImpPlot(model.rf)
})
output$importance_explain <- renderText({
"The mean decrease accuracy plot shows the loss in prediction performance
when that particular factor is omitted from the dataset while the mean
decrease gini plot shows the decrease in GINI when the GINI factor is omitted.
GINI is a measure of node impurity. The mean decrease gini plot shows how
important a factor is to split the data correctly. The plots reaffirms that
the historical sales price of the home is the most important factor in
determining a home value."
})
}
shinyApp(ui, server)
runApp()
runApp()
plot_ly(city_avg_price_df, x = ~Month, y = ~Avg_Value,
type = 'bar') %>%
layout(title = "Seattle Homes Median Sales Price by Month (2009 - 2017)",
xaxis = list(title = "Month"),
yaxis = list(title = "Median Sales Price (thousand $)"))
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
setwd("~/batzrealty")
runApp()
runApp()
# read in csv data
studio_data <- read.csv("data/City_MedianRentalPrice_Studio.csv",
stringsAsFactors = FALSE)
one_data <- read.csv("data/City_MedianRentalPrice_1Bedroom.csv",
stringsAsFactors = FALSE)
two_data <- read.csv("data/City_MedianRentalPrice_2Bedroom.csv",
stringsAsFactors = FALSE)
three_data <- read.csv("data/City_MedianRentalPrice_3Bedroom.csv",
stringsAsFactors = FALSE)
four_data <- read.csv("data/City_MedianRentalPrice_4Bedroom.csv",
stringsAsFactors = FALSE)
# filter for recent date
alter_data <- function(df) {
df <- df %>%
select(Metro, contains("18")) %>%
arrange(desc(X2018.04)) %>%
head(5)
}
studio_data <- alter_data(studio_data)
one_data <- alter_data(one_data)
two_data <- alter_data(two_data)
three_data <- alter_data(three_data)
four_data <- alter_data(four_data)
View(one_data)
# filter for recent date
alter_data <- function(df) {
df <- df %>%
select(Metro, contains("18")) %>%
arrange(desc(X2018.04)) %>%
distinct() %>%
head(5)
}
studio_data <- alter_data(studio_data)
one_data <- alter_data(one_data)
two_data <- alter_data(two_data)
three_data <- alter_data(three_data)
four_data <- alter_data(four_data)
View(one_data)
View(one_data)
# read in csv data
studio_data <- read.csv("data/City_MedianRentalPrice_Studio.csv",
stringsAsFactors = FALSE)
one_data <- read.csv("data/City_MedianRentalPrice_1Bedroom.csv",
stringsAsFactors = FALSE)
View(one_data)
# read in csv data
studio_data <- read.csv("data/City_MedianRentalPrice_Studio.csv",
stringsAsFactors = FALSE)
one_data <- read.csv("data/City_MedianRentalPrice_1Bedroom.csv",
stringsAsFactors = FALSE)
two_data <- read.csv("data/City_MedianRentalPrice_2Bedroom.csv",
stringsAsFactors = FALSE)
three_data <- read.csv("data/City_MedianRentalPrice_3Bedroom.csv",
stringsAsFactors = FALSE)
four_data <- read.csv("data/City_MedianRentalPrice_4Bedroom.csv",
stringsAsFactors = FALSE)
# filter for recent date
alter_data <- function(df) {
df <- df %>%
select(RegionName, contains("18")) %>%
arrange(desc(X2018.04)) %>%
distinct() %>%
head(5)
}
studio_data <- alter_data(studio_data)
one_data <- alter_data(one_data)
two_data <- alter_data(two_data)
three_data <- alter_data(three_data)
four_data <- alter_data(four_data)
runApp()
View(one_data)
runApp()
shiny::runApp()
shiny::runApp()
city <- one_data[1, 1]
# read in csv data
studio_data <- read.csv("data/City_MedianRentalPrice_Studio.csv",
stringsAsFactors = FALSE)
one_data <- read.csv("data/City_MedianRentalPrice_1Bedroom.csv",
stringsAsFactors = FALSE)
two_data <- read.csv("data/City_MedianRentalPrice_2Bedroom.csv",
stringsAsFactors = FALSE)
three_data <- read.csv("data/City_MedianRentalPrice_3Bedroom.csv",
stringsAsFactors = FALSE)
four_data <- read.csv("data/City_MedianRentalPrice_4Bedroom.csv",
stringsAsFactors = FALSE)
# filter for recent date
alter_data <- function(df) {
df <- df %>%
select(RegionName, contains("18")) %>%
arrange(desc(X2018.04)) %>%
distinct() %>%
head(5)
}
studio_data <- alter_data(studio_data)
one_data <- alter_data(one_data)
two_data <- alter_data(two_data)
three_data <- alter_data(three_data)
four_data <- alter_data(four_data)
city <- one_data[1, 1]
city
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(forecast)
library(FNN)
library(rpart)
library(dplyr)
library(rpart.plot)
library(randomForest)
library(stringr)
house_df <- read.csv("./data/zillow_data.csv", stringsAsFactors = FALSE)
###############################################################################
# Convert categorical data to numeric values
house_df$Basement <- ifelse(house_df$Basement == "Finished", 1, 0)
house_df$Townhouse <- ifelse(house_df$Home.Type == "Townhouse", 1, 0)
house_df$Single.Family <- ifelse(house_df$Home.Type == "SingleFamily", 1, 0)
house_df$City.View <- NA
house_df$Mountain.View <- NA
house_df$Territorial.View <- NA
house_df$Water.View <- NA
# Identify the number of views of the house
for (i in 1:nrow(house_df)) {
house_df[i, "View"] <- (str_count(house_df[i, "View"], ",") + 1)
}
# Identify the number of heating sources
for (i in 1:nrow(house_df)) {
house_df[i, "Heating.Sources"] <-
(str_count(house_df[i, "Heating.Sources"], ",") + 1)
}
# Identify if the house has a garage
house_df$Garage <- NA
for (i in 1:nrow(house_df)) {
if (grepl("Garage", house_df[i, "Parking"]) == TRUE) {
house_df[i, "Garage"] <- 1
} else {
house_df[i, "Garage"] <- 0
}
}
# Identify the number of heating system for the house
for (i in 1:nrow(house_df)) {
house_df[i, "Heating.System"] <-
(str_count(house_df[i, "Heating.System"], ",") + 1)
}
# Remove original columns of categorical data and irrelevant columns
model_df <- house_df %>% select(Zestimate, Last.Sold.Price, Year.Built,
Floors, Basement, Bathrooms, Bedrooms,
Finished.SQFT, Lot.Size.SQFT, Townhouse,
Single.Family, Garage, View, Heating.Sources,
Heating.System)
# Convert view, heating sources and system values to numeric
model_df[, "View"] <- as.numeric(model_df[, "View"])
model_df[, "Heating.Sources"] <- as.numeric(model_df[, "Heating.Sources"])
model_df[, "Heating.System"] <- as.numeric(model_df[, "Heating.System"])
###################
#### MLR Model ####
###################
set.seed(1)
# Partition data into 70% training and 30% validating
train.index <- sample(1:nrow(model_df), nrow(model_df) * 0.7)
train.df <- model_df[train.index, ]
valid.df <- model_df[-train.index, ]
# Perform linear regression on the model with zestimate as
# the outcome variable
model.df.lm <- lm(Zestimate ~ ., data = train.df)
# Examine the statistically significant factors
options(scopen = 999)
summary(model.df.lm)
######################
### Random Forrest ###
######################
rf.model_df <- model_df
# Create new column to categorize home value
rf.model_df$Value.Quartile <- NA
# Extract quartile data from home value
quartile_data <- as.data.frame(quantile(rf.model_df$Zestimate))
# Populate the home value quartile column
for (i in 1:nrow(rf.model_df)) {
ob = ""
if (rf.model_df[i, "Zestimate"] > quartile_data[4, ]) {
ob = ">75%"
} else if (rf.model_df[i, "Zestimate"] > quartile_data[3, ]) {
ob = "50-75%"
} else if (rf.model_df[i, "Zestimate"] > quartile_data[2, ]) {
ob = "25-50%"
} else {
ob = "<25%"
}
rf.model_df[i, "Value.Quartile"] <- ob
}
# Convert value quartile format to factor and removes original zestimate
# column
rf.model_df[, "Value.Quartile"] <-
as.factor(rf.model_df[, "Value.Quartile"])
rf.model_df <- rf.model_df %>% select(-Zestimate)
# Partition data
set.seed(1)
train.index <- sample(1:nrow(knn.model_df), nrow(knn.model_df) * 0.7)
train.df <- rf.model_df[train.index, ]
valid.df <- rf.model_df[-train.index, ]
# Create the random forest model
model.rf <- randomForest(Value.Quartile ~ .,
data = train.df, ntree = 400, importance = TRUE)
# Store the accuracy of the model in a variable
forest_accuracy = (1 - model.rf$err.rate[[nrow(model.rf$err.rate)]]) * 100
forest_accuracy = format(round(forest_accuracy, 2), nsmall = 2)
# Predict the classification of hoem value in validation set
model.rf.pred <- predict(model.rf, valid.df[, -ncol(valid.df)])
model.rf.pred
runApp()
shiny::runApp()
runApp()
